{"ast":null,"code":"import api from './api.config';\n\n// Adicione a constante API_URL\nconst API_URL = process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' ? 'http://localhost:8000/api/' : '/api/');\nclass AuthService {\n  async login(email, password) {\n    try {\n      console.log(\"Tentando login com:\", {\n        email\n      });\n      const response = await api.post('auth/signin', {\n        email,\n        password\n      });\n      console.log(\"Resposta do servidor:\", response.data);\n\n      // Verificar se a resposta contém os dados necessários\n      if (!response.data || !response.data.accessToken) {\n        console.error(\"Resposta inválida do servidor:\", response.data);\n        throw new Error('Resposta inválida do servidor');\n      }\n\n      // Garantir que temos todas as informações necessárias\n      const userData = {\n        ...response.data,\n        tipo: response.data.tipo || 'cliente',\n        // fallback para 'cliente' se não especificado\n        accessToken: response.data.accessToken,\n        id: response.data.id\n      };\n\n      // Armazenar no localStorage\n      localStorage.setItem('user', JSON.stringify(userData));\n      return userData;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data;\n      console.error('Erro detalhado no login:', {\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n        message: error.message\n      });\n\n      // Repassar a mensagem de erro do servidor se disponível\n      if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.message) {\n        throw new Error(error.response.data.message);\n      }\n      throw error;\n    }\n  }\n  logout() {\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  async register(email, senha, nome, telefone, role, dadosEspecificos = {}) {\n    try {\n      console.log(`Tentando registro em ${API_URL}auth/signup`);\n      console.log(\"Dados a enviar:\", {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      });\n\n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n\n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos // Inclui todos os dados específicos (data_nascimento, morada, nif, etc.)\n      };\n      console.log(\"Dados completos a enviar:\", userData);\n      return await api.post('auth/signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n\n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      throw error;\n    }\n  }\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem('user');\n      if (!userStr) return null;\n      const user = JSON.parse(userStr);\n      if (!user.accessToken) return null;\n\n      // Verificar se o token está expirado\n      const tokenInfo = this.decodeToken(user.accessToken);\n      if (tokenInfo.exp && tokenInfo.exp * 1000 < Date.now()) {\n        this.logout();\n        return null;\n      }\n      return user;\n    } catch (error) {\n      console.error('Erro ao recuperar usuário:', error);\n      return null;\n    }\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n  getToken() {\n    const user = this.getCurrentUser();\n    return user === null || user === void 0 ? void 0 : user.accessToken;\n  }\n  async refreshToken() {\n    const user = this.getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.refreshToken)) return null;\n    try {\n      const response = await api.post('auth/refresh-token', {\n        refreshToken: user.refreshToken\n      });\n      if (response.data.accessToken) {\n        const updatedUser = {\n          ...user,\n          accessToken: response.data.accessToken\n        };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        return updatedUser;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      return null;\n    }\n  }\n  decodeToken(token) {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('Erro ao decodificar token:', error);\n      return {};\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["api","API_URL","process","env","REACT_APP_API_URL","window","location","hostname","AuthService","login","email","password","console","log","response","post","data","accessToken","error","Error","userData","tipo","id","localStorage","setItem","JSON","stringify","_error$response","_error$response2","_error$response3","_error$response3$data","status","message","logout","removeItem","href","register","senha","nome","telefone","role","dadosEspecificos","config","timeout","code","url","serverStatus","getCurrentUser","userStr","getItem","user","parse","tokenInfo","decodeToken","exp","Date","now","isAuthenticated","isAdmin","roles","includes","hasRole","requiredRole","tipoUtilizador","getToken","refreshToken","updatedUser","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/auth.service.js"],"sourcesContent":["import api from './api.config';\n\n// Adicione a constante API_URL\nconst API_URL = process.env.REACT_APP_API_URL || \n  (window.location.hostname === 'localhost' ? 'http://localhost:8000/api/' : '/api/');\n\nclass AuthService {\n  async login(email, password) {\n    try {\n      console.log(\"Tentando login com:\", { email });\n      \n      const response = await api.post('auth/signin', { \n        email, \n        password \n      });\n\n      console.log(\"Resposta do servidor:\", response.data);\n\n      // Verificar se a resposta contém os dados necessários\n      if (!response.data || !response.data.accessToken) {\n        console.error(\"Resposta inválida do servidor:\", response.data);\n        throw new Error('Resposta inválida do servidor');\n      }\n\n      // Garantir que temos todas as informações necessárias\n      const userData = {\n        ...response.data,\n        tipo: response.data.tipo || 'cliente', // fallback para 'cliente' se não especificado\n        accessToken: response.data.accessToken,\n        id: response.data.id\n      };\n\n      // Armazenar no localStorage\n      localStorage.setItem('user', JSON.stringify(userData));\n      \n      return userData;\n    } catch (error) {\n      console.error('Erro detalhado no login:', {\n        status: error.response?.status,\n        data: error.response?.data,\n        message: error.message\n      });\n\n      // Repassar a mensagem de erro do servidor se disponível\n      if (error.response?.data?.message) {\n        throw new Error(error.response.data.message);\n      }\n      throw error;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n\n  async register(email, senha, nome, telefone, role, dadosEspecificos = {}) {\n    try {\n      console.log(`Tentando registro em ${API_URL}auth/signup`);\n      console.log(\"Dados a enviar:\", {\n        nome, email, senha, telefone, tipo: role, ...dadosEspecificos\n      });\n      \n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n      \n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos // Inclui todos os dados específicos (data_nascimento, morada, nif, etc.)\n      };\n      \n      console.log(\"Dados completos a enviar:\", userData);\n      \n      return await api.post('auth/signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n      \n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      \n      throw error;\n    }\n  }\n\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem('user');\n      if (!userStr) return null;\n      \n      const user = JSON.parse(userStr);\n      if (!user.accessToken) return null;\n\n      // Verificar se o token está expirado\n      const tokenInfo = this.decodeToken(user.accessToken);\n      if (tokenInfo.exp && tokenInfo.exp * 1000 < Date.now()) {\n        this.logout();\n        return null;\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Erro ao recuperar usuário:', error);\n      return null;\n    }\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n\n  getToken() {\n    const user = this.getCurrentUser();\n    return user?.accessToken;\n  }\n\n  async refreshToken() {\n    const user = this.getCurrentUser();\n    if (!user?.refreshToken) return null;\n\n    try {\n      const response = await api.post('auth/refresh-token', {\n        refreshToken: user.refreshToken\n      });\n\n      if (response.data.accessToken) {\n        const updatedUser = {\n          ...user,\n          accessToken: response.data.accessToken\n        };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        return updatedUser;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      return null;\n    }\n  }\n\n  decodeToken(token) {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('Erro ao decodificar token:', error);\n      return {};\n    }\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}