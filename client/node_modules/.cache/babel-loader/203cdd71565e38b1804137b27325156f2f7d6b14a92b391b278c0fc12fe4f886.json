{"ast":null,"code":"import axios from 'axios';\n\n// Detectar automaticamente o ambiente e configurar a URL base\nconst baseURL = process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' ? 'http://localhost:8080/api/' : '/api/');\nconst API_URL = `${baseURL}auth/`;\nclass AuthService {\n  async login(email, password) {\n    try {\n      console.log(`Tentando login em ${API_URL}signin`);\n      const response = await axios.post(API_URL + 'signin', {\n        email,\n        password\n      });\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  async register(email, senha, nome, telefone, role, dadosEspecificos) {\n    try {\n      console.log(`Tentando registro em ${API_URL}signup`);\n\n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n\n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      };\n      console.log(\"Dados a enviar:\", userData);\n      return await axios.post(API_URL + 'signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n\n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      throw error;\n    }\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","baseURL","process","env","REACT_APP_API_URL","window","location","hostname","API_URL","AuthService","login","email","password","console","log","response","post","data","accessToken","localStorage","setItem","JSON","stringify","error","logout","removeItem","register","senha","nome","telefone","role","dadosEspecificos","config","timeout","userData","tipo","code","message","url","serverStatus","getCurrentUser","parse","getItem","isAuthenticated","user","isAdmin","roles","includes","hasRole","requiredRole","tipoUtilizador"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\n\n// Detectar automaticamente o ambiente e configurar a URL base\nconst baseURL = process.env.REACT_APP_API_URL || \n               (window.location.hostname === 'localhost' ? \n                'http://localhost:8080/api/' : \n                '/api/');\n\nconst API_URL = `${baseURL}auth/`;\n\nclass AuthService {\n  async login(email, password) {\n    try {\n      console.log(`Tentando login em ${API_URL}signin`);\n      const response = await axios.post(API_URL + 'signin', {\n        email,\n        password\n      });\n      \n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  async register(email, senha, nome, telefone, role, dadosEspecificos) {\n    try {\n      console.log(`Tentando registro em ${API_URL}signup`);\n      \n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n      \n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      };\n      \n      console.log(\"Dados a enviar:\", userData);\n      \n      return await axios.post(API_URL + 'signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n      \n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      \n      throw error;\n    }\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}