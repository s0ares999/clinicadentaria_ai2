{"ast":null,"code":"import api from './api.config';\n\n// Adicione a constante API_URL\nconst API_URL = process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' ? 'http://localhost:8000/api/' : '/api/');\nclass AuthService {\n  async login(email, password) {\n    try {\n      const response = await api.post('auth/signin', {\n        email,\n        password\n      });\n      if (response.data && response.data.accessToken) {\n        // Decodificar o token para verificar as informações\n        const tokenInfo = this.decodeToken(response.data.accessToken);\n\n        // Combinar informações do token com a resposta\n        const userData = {\n          ...response.data,\n          tipo: tokenInfo.tipo || response.data.tipo,\n          id: tokenInfo.id || response.data.id\n        };\n        localStorage.setItem('user', JSON.stringify(userData));\n        return userData;\n      }\n      throw new Error('Token não encontrado na resposta');\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('Erro detalhado no login:', {\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n        message: error.message\n      });\n      throw error;\n    }\n  }\n  logout() {\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  async register(email, senha, nome, telefone, role, dadosEspecificos = {}) {\n    try {\n      console.log(`Tentando registro em ${API_URL}auth/signup`);\n      console.log(\"Dados a enviar:\", {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      });\n\n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n\n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos // Inclui todos os dados específicos (data_nascimento, morada, nif, etc.)\n      };\n      console.log(\"Dados completos a enviar:\", userData);\n      return await api.post('auth/signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n\n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      throw error;\n    }\n  }\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem('user');\n      if (!userStr) return null;\n      const user = JSON.parse(userStr);\n      if (!user.accessToken) return null;\n\n      // Verificar se o token está expirado\n      const tokenInfo = this.decodeToken(user.accessToken);\n      if (tokenInfo.exp && tokenInfo.exp * 1000 < Date.now()) {\n        this.logout();\n        return null;\n      }\n      return user;\n    } catch (error) {\n      console.error('Erro ao recuperar usuário:', error);\n      return null;\n    }\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n  getToken() {\n    const user = this.getCurrentUser();\n    return user === null || user === void 0 ? void 0 : user.accessToken;\n  }\n  async refreshToken() {\n    const user = this.getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.refreshToken)) return null;\n    try {\n      const response = await api.post('auth/refresh-token', {\n        refreshToken: user.refreshToken\n      });\n      if (response.data.accessToken) {\n        const updatedUser = {\n          ...user,\n          accessToken: response.data.accessToken\n        };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        return updatedUser;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      return null;\n    }\n  }\n  decodeToken(token) {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('Erro ao decodificar token:', error);\n      return {};\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["api","API_URL","process","env","REACT_APP_API_URL","window","location","hostname","AuthService","login","email","password","response","post","data","accessToken","tokenInfo","decodeToken","userData","tipo","id","localStorage","setItem","JSON","stringify","Error","error","_error$response","_error$response2","console","status","message","logout","removeItem","href","register","senha","nome","telefone","role","dadosEspecificos","log","config","timeout","code","url","serverStatus","getCurrentUser","userStr","getItem","user","parse","exp","Date","now","isAuthenticated","isAdmin","roles","includes","hasRole","requiredRole","tipoUtilizador","getToken","refreshToken","updatedUser","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/auth.service.js"],"sourcesContent":["import api from './api.config';\n\n// Adicione a constante API_URL\nconst API_URL = process.env.REACT_APP_API_URL || \n  (window.location.hostname === 'localhost' ? 'http://localhost:8000/api/' : '/api/');\n\nclass AuthService {\n  async login(email, password) {\n    try {\n      const response = await api.post('auth/signin', { \n        email, \n        password \n      });\n\n      if (response.data && response.data.accessToken) {\n        // Decodificar o token para verificar as informações\n        const tokenInfo = this.decodeToken(response.data.accessToken);\n        \n        // Combinar informações do token com a resposta\n        const userData = {\n          ...response.data,\n          tipo: tokenInfo.tipo || response.data.tipo,\n          id: tokenInfo.id || response.data.id\n        };\n\n        localStorage.setItem('user', JSON.stringify(userData));\n        return userData;\n      }\n      \n      throw new Error('Token não encontrado na resposta');\n    } catch (error) {\n      console.error('Erro detalhado no login:', {\n        status: error.response?.status,\n        data: error.response?.data,\n        message: error.message\n      });\n      throw error;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n\n  async register(email, senha, nome, telefone, role, dadosEspecificos = {}) {\n    try {\n      console.log(`Tentando registro em ${API_URL}auth/signup`);\n      console.log(\"Dados a enviar:\", {\n        nome, email, senha, telefone, tipo: role, ...dadosEspecificos\n      });\n      \n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n      \n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos // Inclui todos os dados específicos (data_nascimento, morada, nif, etc.)\n      };\n      \n      console.log(\"Dados completos a enviar:\", userData);\n      \n      return await api.post('auth/signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n      \n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      \n      throw error;\n    }\n  }\n\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem('user');\n      if (!userStr) return null;\n      \n      const user = JSON.parse(userStr);\n      if (!user.accessToken) return null;\n\n      // Verificar se o token está expirado\n      const tokenInfo = this.decodeToken(user.accessToken);\n      if (tokenInfo.exp && tokenInfo.exp * 1000 < Date.now()) {\n        this.logout();\n        return null;\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Erro ao recuperar usuário:', error);\n      return null;\n    }\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n\n  getToken() {\n    const user = this.getCurrentUser();\n    return user?.accessToken;\n  }\n\n  async refreshToken() {\n    const user = this.getCurrentUser();\n    if (!user?.refreshToken) return null;\n\n    try {\n      const response = await api.post('auth/refresh-token', {\n        refreshToken: user.refreshToken\n      });\n\n      if (response.data.accessToken) {\n        const updatedUser = {\n          ...user,\n          accessToken: response.data.accessToken\n        };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        return updatedUser;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      return null;\n    }\n  }\n\n  decodeToken(token) {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('Erro ao decodificar token:', error);\n      return {};\n    }\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}