{"ast":null,"code":"import axios from 'axios';\n\n// Detectar automaticamente o ambiente e configurar a URL base\nconst baseURL = process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' ? 'http://localhost:8000/api/' : '/api/');\nconst API_URL = `${baseURL}auth/`;\nclass AuthService {\n  login(email, password) {\n    console.log(\"Tentando login com:\", email);\n    // Remover barras à direita para evitar URL com barras duplas\n    const baseUrl = API_URL.endsWith('/') ? API_URL.slice(0, -1) : API_URL;\n    return axios.post(`${baseUrl}/signin`, {\n      email,\n      password\n    }).then(response => {\n      console.log(\"Login bem-sucedido:\", response.data);\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n      return response.data;\n    }).catch(error => {\n      console.error(\"Erro no login:\", error);\n      console.error(\"URL usada:\", `${baseUrl}/signin`);\n      if (error.response) {\n        console.error(\"Resposta do servidor:\", error.response.data);\n        console.error(\"Status:\", error.response.status);\n      }\n      throw error;\n    });\n  }\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n  async register(email, senha, nome, telefone, role, dadosEspecificos = {}) {\n    try {\n      console.log(`Tentando registro em ${API_URL}signup`);\n      console.log(\"Dados a enviar:\", {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      });\n\n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n\n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos // Inclui todos os dados específicos (data_nascimento, morada, nif, etc.)\n      };\n      console.log(\"Dados completos a enviar:\", userData);\n      return await axios.post(API_URL + 'signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n\n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      throw error;\n    }\n  }\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem(\"user\");\n      if (!userStr) return null;\n      const user = JSON.parse(userStr);\n      if (user && user.accessToken) {\n        const tokenPayload = this.decodeToken(user.accessToken);\n        return {\n          ...user,\n          tipo: tokenPayload.tipo || user.tipo,\n          role: tokenPayload.role || user.role\n        };\n      }\n      return user;\n    } catch (error) {\n      console.error('Erro ao recuperar usuário:', error);\n      return null;\n    }\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n  getToken() {\n    const user = this.getCurrentUser();\n    return user === null || user === void 0 ? void 0 : user.accessToken;\n  }\n  decodeToken(token) {\n    // Implemente a lógica para decodificar o token JWT\n    // Esta é uma implementação básica e pode ser melhorada\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n    return JSON.parse(jsonPayload);\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","baseURL","process","env","REACT_APP_API_URL","window","location","hostname","API_URL","AuthService","login","email","password","console","log","baseUrl","endsWith","slice","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","catch","error","status","logout","removeItem","register","senha","nome","telefone","role","dadosEspecificos","tipo","config","timeout","userData","code","message","url","serverStatus","getCurrentUser","userStr","getItem","user","parse","tokenPayload","decodeToken","isAuthenticated","isAdmin","roles","includes","hasRole","requiredRole","tipoUtilizador","getToken","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","join"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\n\n// Detectar automaticamente o ambiente e configurar a URL base\nconst baseURL = process.env.REACT_APP_API_URL || \n               (window.location.hostname === 'localhost' ? \n                'http://localhost:8000/api/' : \n                '/api/');\n\nconst API_URL = `${baseURL}auth/`;\n\nclass AuthService {\n  login(email, password) {\n    console.log(\"Tentando login com:\", email);\n    // Remover barras à direita para evitar URL com barras duplas\n    const baseUrl = API_URL.endsWith('/') ? API_URL.slice(0, -1) : API_URL;\n    \n    return axios\n      .post(`${baseUrl}/signin`, {\n        email,\n        password\n      })\n      .then(response => {\n        console.log(\"Login bem-sucedido:\", response.data);\n        if (response.data.accessToken) {\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\n        }\n        return response.data;\n      })\n      .catch(error => {\n        console.error(\"Erro no login:\", error);\n        console.error(\"URL usada:\", `${baseUrl}/signin`);\n        \n        if (error.response) {\n          console.error(\"Resposta do servidor:\", error.response.data);\n          console.error(\"Status:\", error.response.status);\n        }\n        \n        throw error;\n      });\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  async register(email, senha, nome, telefone, role, dadosEspecificos = {}) {\n    try {\n      console.log(`Tentando registro em ${API_URL}signup`);\n      console.log(\"Dados a enviar:\", {\n        nome, email, senha, telefone, tipo: role, ...dadosEspecificos\n      });\n      \n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n      \n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos // Inclui todos os dados específicos (data_nascimento, morada, nif, etc.)\n      };\n      \n      console.log(\"Dados completos a enviar:\", userData);\n      \n      return await axios.post(API_URL + 'signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n      \n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      \n      throw error;\n    }\n  }\n\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem(\"user\");\n      if (!userStr) return null;\n      \n      const user = JSON.parse(userStr);\n      if (user && user.accessToken) {\n        const tokenPayload = this.decodeToken(user.accessToken);\n        return {\n          ...user,\n          tipo: tokenPayload.tipo || user.tipo,\n          role: tokenPayload.role || user.role\n        };\n      }\n      return user;\n    } catch (error) {\n      console.error('Erro ao recuperar usuário:', error);\n      return null;\n    }\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n\n  getToken() {\n    const user = this.getCurrentUser();\n    return user?.accessToken;\n  }\n\n  decodeToken(token) {\n    // Implemente a lógica para decodificar o token JWT\n    // Esta é uma implementação básica e pode ser melhorada\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n\n    return JSON.parse(jsonPayload);\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}