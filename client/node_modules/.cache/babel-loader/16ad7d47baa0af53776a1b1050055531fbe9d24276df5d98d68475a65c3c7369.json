{"ast":null,"code":"import axios from 'axios';\n\n// Configuração do URL base\nconst getBaseUrl = () => {\n  // Para desenvolvimento local, tente várias opções\n  const devUrls = ['http://localhost:8080/api/', 'http://127.0.0.1:8080/api/', `http://${window.location.hostname}:8080/api/`];\n\n  // Obter URL da variável de ambiente ou configurações\n  return process.env.REACT_APP_API_URL || devUrls[0];\n};\nconst API_URL = getBaseUrl() + 'auth/';\nclass AuthService {\n  constructor() {\n    console.log(\"AuthService inicializado com URL base:\", API_URL);\n\n    // Configuração global do Axios\n    axios.defaults.timeout = 10000; // 10 segundos\n\n    // Interceptador para adicionar cabeçalhos, etc.\n    axios.interceptors.request.use(config => {\n      console.log(`Requisição para: ${config.url}`);\n      return config;\n    }, error => {\n      console.error(\"Erro na requisição:\", error);\n      return Promise.reject(error);\n    });\n  }\n\n  // Testar conexão com o servidor\n  async testConnection() {\n    try {\n      console.log(\"Testando conexão com o servidor...\");\n      const baseUrl = getBaseUrl();\n      const response = await axios.get(`${baseUrl}status`);\n      console.log(\"Conexão bem-sucedida:\", response.data);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error(\"Erro ao testar conexão:\", error);\n      return {\n        success: false,\n        error: error.message,\n        details: {\n          code: error.code,\n          url: getBaseUrl() + 'status'\n        }\n      };\n    }\n  }\n  async login(email, password) {\n    try {\n      console.log(`Tentando login em ${API_URL}signin`);\n      const response = await axios.post(API_URL + 'signin', {\n        email,\n        password\n      });\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      console.error(\"Service: erro no login\", error);\n      throw error;\n    }\n  }\n  async register(email, senha, nome, telefone, role, dadosEspecificos) {\n    try {\n      console.log(`Tentando registro em ${API_URL}signup`);\n\n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      };\n      console.log(\"Dados a enviar:\", userData);\n\n      // Teste o servidor antes de tentar o registro\n      await this.testConnection();\n\n      // Tente registrar com várias opções de URL se o principal falhar\n      try {\n        return await axios.post(API_URL + 'signup', userData);\n      } catch (err) {\n        if (err.code === 'ERR_NETWORK') {\n          // Tente URLs alternativos\n          for (let i = 1; i < 3; i++) {\n            try {\n              const altUrl = getBaseUrl().replace(getBaseUrl(), devUrls[i]) + 'auth/signup';\n              console.log(`Tentando URL alternativo: ${altUrl}`);\n              return await axios.post(altUrl, userData);\n            } catch (altErr) {\n              console.error(`Falha no URL alternativo ${i + 1}:`, altErr.message);\n            }\n          }\n        }\n        throw err; // Se todos falharem, propague o erro original\n      }\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n\n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      throw error;\n    }\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","getBaseUrl","devUrls","window","location","hostname","process","env","REACT_APP_API_URL","API_URL","AuthService","constructor","console","log","defaults","timeout","interceptors","request","use","config","url","error","Promise","reject","testConnection","baseUrl","response","get","data","success","message","details","code","login","email","password","post","accessToken","localStorage","setItem","JSON","stringify","register","senha","nome","telefone","role","dadosEspecificos","userData","tipo","err","i","altUrl","replace","altErr","serverStatus","logout","removeItem","getCurrentUser","parse","getItem","isAuthenticated","user","isAdmin","roles","includes","hasRole","requiredRole","tipoUtilizador"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuração do URL base\nconst getBaseUrl = () => {\n  // Para desenvolvimento local, tente várias opções\n  const devUrls = [\n    'http://localhost:8080/api/',\n    'http://127.0.0.1:8080/api/',\n    `http://${window.location.hostname}:8080/api/`\n  ];\n  \n  // Obter URL da variável de ambiente ou configurações\n  return process.env.REACT_APP_API_URL || devUrls[0];\n};\n\nconst API_URL = getBaseUrl() + 'auth/';\n\nclass AuthService {\n  constructor() {\n    console.log(\"AuthService inicializado com URL base:\", API_URL);\n    \n    // Configuração global do Axios\n    axios.defaults.timeout = 10000; // 10 segundos\n    \n    // Interceptador para adicionar cabeçalhos, etc.\n    axios.interceptors.request.use(\n      config => {\n        console.log(`Requisição para: ${config.url}`);\n        return config;\n      },\n      error => {\n        console.error(\"Erro na requisição:\", error);\n        return Promise.reject(error);\n      }\n    );\n  }\n  \n  // Testar conexão com o servidor\n  async testConnection() {\n    try {\n      console.log(\"Testando conexão com o servidor...\");\n      const baseUrl = getBaseUrl();\n      const response = await axios.get(`${baseUrl}status`);\n      console.log(\"Conexão bem-sucedida:\", response.data);\n      return { success: true, data: response.data };\n    } catch (error) {\n      console.error(\"Erro ao testar conexão:\", error);\n      return { \n        success: false, \n        error: error.message,\n        details: {\n          code: error.code,\n          url: getBaseUrl() + 'status'\n        }\n      };\n    }\n  }\n\n  async login(email, password) {\n    try {\n      console.log(`Tentando login em ${API_URL}signin`);\n      const response = await axios.post(API_URL + 'signin', {\n        email,\n        password\n      });\n      \n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error(\"Service: erro no login\", error);\n      throw error;\n    }\n  }\n\n  async register(email, senha, nome, telefone, role, dadosEspecificos) {\n    try {\n      console.log(`Tentando registro em ${API_URL}signup`);\n      \n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      };\n      \n      console.log(\"Dados a enviar:\", userData);\n      \n      // Teste o servidor antes de tentar o registro\n      await this.testConnection();\n      \n      // Tente registrar com várias opções de URL se o principal falhar\n      try {\n        return await axios.post(API_URL + 'signup', userData);\n      } catch (err) {\n        if (err.code === 'ERR_NETWORK') {\n          // Tente URLs alternativos\n          for (let i = 1; i < 3; i++) {\n            try {\n              const altUrl = getBaseUrl().replace(getBaseUrl(), devUrls[i]) + 'auth/signup';\n              console.log(`Tentando URL alternativo: ${altUrl}`);\n              return await axios.post(altUrl, userData);\n            } catch (altErr) {\n              console.error(`Falha no URL alternativo ${i+1}:`, altErr.message);\n            }\n          }\n        }\n        throw err; // Se todos falharem, propague o erro original\n      }\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n      \n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      \n      throw error;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}