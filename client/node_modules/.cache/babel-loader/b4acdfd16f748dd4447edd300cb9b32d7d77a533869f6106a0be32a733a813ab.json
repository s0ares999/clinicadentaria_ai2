{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/auth/';\nclass AuthService {\n  login(email, password) {\n    return axios.post(API_URL + 'signin', {\n      email,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  register(username, email, password, role = 'cliente', clienteData = null) {\n    const requestData = {\n      username,\n      email,\n      password,\n      role\n    };\n\n    // Adicionar dados do cliente se fornecidos\n    if (role === 'cliente' && clienteData) {\n      requestData.clienteData = clienteData;\n    }\n    return axios.post(API_URL + 'signup', requestData);\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","AuthService","login","email","password","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","logout","removeItem","register","username","role","clienteData","requestData","getCurrentUser","parse","getItem","isAuthenticated","user","isAdmin","roles","includes"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api/auth/';\n\nclass AuthService {\n  login(email, password) {\n    return axios\n      .post(API_URL + 'signin', {\n        email,\n        password\n      })\n      .then(response => {\n        if (response.data.accessToken) {\n          localStorage.setItem('user', JSON.stringify(response.data));\n        }\n\n        return response.data;\n      });\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  register(username, email, password, role = 'cliente', clienteData = null) {\n    const requestData = {\n      username,\n      email,\n      password,\n      role\n    };\n\n    // Adicionar dados do cliente se fornecidos\n    if (role === 'cliente' && clienteData) {\n      requestData.clienteData = clienteData;\n    }\n\n    return axios.post(API_URL + 'signup', requestData);\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,iCAAiC;AAEjD,MAAMC,WAAW,CAAC;EAChBC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACrB,OAAOL,KAAK,CACTM,IAAI,CAACL,OAAO,GAAG,QAAQ,EAAE;MACxBG,KAAK;MACLC;IACF,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,IAAI,CAACC,WAAW,EAAE;QAC7BC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC7D;MAEA,OAAOD,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC;EACN;EAEAM,MAAMA,CAAA,EAAG;IACPJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;EACjC;EAEAC,QAAQA,CAACC,QAAQ,EAAEd,KAAK,EAAEC,QAAQ,EAAEc,IAAI,GAAG,SAAS,EAAEC,WAAW,GAAG,IAAI,EAAE;IACxE,MAAMC,WAAW,GAAG;MAClBH,QAAQ;MACRd,KAAK;MACLC,QAAQ;MACRc;IACF,CAAC;;IAED;IACA,IAAIA,IAAI,KAAK,SAAS,IAAIC,WAAW,EAAE;MACrCC,WAAW,CAACD,WAAW,GAAGA,WAAW;IACvC;IAEA,OAAOpB,KAAK,CAACM,IAAI,CAACL,OAAO,GAAG,QAAQ,EAAEoB,WAAW,CAAC;EACpD;EAEAC,cAAcA,CAAA,EAAG;IACf,OAAOT,IAAI,CAACU,KAAK,CAACZ,YAAY,CAACa,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;;EAEA;EACAC,eAAeA,CAAA,EAAG;IAChB,MAAMC,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,OAAO,CAAC,CAACI,IAAI,IAAI,CAAC,CAACA,IAAI,CAAChB,WAAW;EACrC;;EAEA;EACAiB,OAAOA,CAAA,EAAG;IACR,MAAMD,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,OAAO,CAAC,CAACI,IAAI,IAAIA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACC,QAAQ,CAAC,YAAY,CAAC;EAClE;AACF;AAEA,eAAe,IAAI3B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}