{"ast":null,"code":"import axios from 'axios';\nimport AuthService from './auth.service';\nconst API_URL = \"http://localhost:8000/api/cliente/\";\nclass ClienteService {\n  constructor() {\n    this.refreshAuth();\n  }\n  refreshAuth() {\n    const user = AuthService.getCurrentUser();\n    if (user && user.accessToken) {\n      // Configuração global para todas as requisições axios\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + user.accessToken;\n      axios.defaults.headers.common['x-access-token'] = user.accessToken;\n      console.log(\"ClienteService - Token disponível:\", user.accessToken ? \"Sim\" : \"Não\");\n      console.log(\"ClienteService - Token configurado nos headers do Axios\");\n    }\n  }\n  async getClienteProfile() {\n    try {\n      console.log(\"Buscando perfil do cliente em: \" + API_URL + \"perfil\");\n      const user = AuthService.getCurrentUser();\n      if (!user || !user.accessToken) {\n        console.error(\"Token de autenticação não disponível\");\n        return {\n          error: true,\n          message: \"Token não disponível\"\n        };\n      }\n\n      // Exibir token parcialmente para debug\n      console.log(\"Enviando token:\", user.accessToken.substring(0, 20) + \"...\");\n\n      // Criar uma instância do axios com configurações específicas para CORS\n      const axiosInstance = axios.create({\n        withCredentials: true,\n        // Envia cookies e credenciais\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + user.accessToken,\n          'x-access-token': user.accessToken,\n          // Tente incluir o ID do usuário como parâmetro adicional\n          'user-id': user.id.toString()\n        }\n      });\n\n      // Tentar incluir o token como parâmetro de query (último recurso)\n      const response = await axiosInstance.get(API_URL + \"perfil\", {\n        params: {\n          token: user.accessToken\n        }\n      });\n      return response;\n    } catch (error) {\n      this.logErrorDetails(error);\n\n      // Tentar alternativa com POST em vez de GET\n      try {\n        console.log(\"Tentando alternativa com método POST...\");\n        const user = AuthService.getCurrentUser();\n        const response = await axios.post(API_URL + \"perfil\", {\n          clienteId: user.id\n        }, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + user.accessToken,\n            'x-access-token': user.accessToken\n          }\n        });\n        return response;\n      } catch (secondError) {\n        console.error(\"Segunda tentativa também falhou:\", secondError.message);\n        throw error; // Lançar o erro original\n      }\n    }\n  }\n  logErrorDetails(error) {\n    console.error(\"Erro ao comunicar com a API:\", error.message);\n    if (error.response) {\n      console.log(\"Status:\", error.response.status);\n      console.log(\"Dados:\", error.response.data);\n      console.log(\"Headers:\", error.response.headers);\n\n      // Imprimir cabeçalhos enviados\n      console.log(\"Cabeçalhos enviados:\", error.config.headers);\n    } else if (error.request) {\n      console.log(\"Request enviado, sem resposta:\", error.request);\n    }\n    console.log(\"Config completa:\", error.config);\n  }\n\n  // Atualizar perfil do cliente\n  async updateClienteProfile(clienteData) {\n    this.refreshAuth(); // Garante que o token está atualizado\n    console.log(\"Atualizando perfil, dados:\", clienteData);\n    return axios.put(`${API_URL}/perfil`, clienteData, {\n      headers: {\n        \"x-access-token\": AuthService.getCurrentUser().accessToken,\n        \"Authorization\": \"Bearer \" + AuthService.getCurrentUser().accessToken\n      }\n    });\n  }\n\n  // Obter histórico de consultas do cliente\n  async getConsultas() {\n    this.refreshAuth(); // Garante que o token está atualizado\n    return axios.get(`${API_URL}/consultas`, {\n      headers: {\n        \"x-access-token\": AuthService.getCurrentUser().accessToken,\n        \"Authorization\": \"Bearer \" + AuthService.getCurrentUser().accessToken\n      }\n    });\n  }\n}\nexport default new ClienteService();","map":{"version":3,"names":["axios","AuthService","API_URL","ClienteService","constructor","refreshAuth","user","getCurrentUser","accessToken","defaults","headers","common","console","log","getClienteProfile","error","message","substring","axiosInstance","create","withCredentials","id","toString","response","get","params","token","logErrorDetails","post","clienteId","secondError","status","data","config","request","updateClienteProfile","clienteData","put","getConsultas"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/cliente.service.js"],"sourcesContent":["import axios from 'axios';\r\nimport AuthService from './auth.service';\r\n\r\nconst API_URL = \"http://localhost:8000/api/cliente/\";\r\n\r\nclass ClienteService {\r\n  constructor() {\r\n    this.refreshAuth();\r\n  }\r\n  \r\n  refreshAuth() {\r\n    const user = AuthService.getCurrentUser();\r\n    if (user && user.accessToken) {\r\n      // Configuração global para todas as requisições axios\r\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + user.accessToken;\r\n      axios.defaults.headers.common['x-access-token'] = user.accessToken;\r\n      \r\n      console.log(\"ClienteService - Token disponível:\", user.accessToken ? \"Sim\" : \"Não\");\r\n      console.log(\"ClienteService - Token configurado nos headers do Axios\");\r\n    }\r\n  }\r\n\r\n  async getClienteProfile() {\r\n    try {\r\n      console.log(\"Buscando perfil do cliente em: \" + API_URL + \"perfil\");\r\n      const user = AuthService.getCurrentUser();\r\n      \r\n      if (!user || !user.accessToken) {\r\n        console.error(\"Token de autenticação não disponível\");\r\n        return { error: true, message: \"Token não disponível\" };\r\n      }\r\n\r\n      // Exibir token parcialmente para debug\r\n      console.log(\"Enviando token:\", user.accessToken.substring(0, 20) + \"...\");\r\n      \r\n      // Criar uma instância do axios com configurações específicas para CORS\r\n      const axiosInstance = axios.create({\r\n        withCredentials: true, // Envia cookies e credenciais\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer ' + user.accessToken,\r\n          'x-access-token': user.accessToken,\r\n          // Tente incluir o ID do usuário como parâmetro adicional\r\n          'user-id': user.id.toString()\r\n        }\r\n      });\r\n\r\n      // Tentar incluir o token como parâmetro de query (último recurso)\r\n      const response = await axiosInstance.get(API_URL + \"perfil\", {\r\n        params: { token: user.accessToken }\r\n      });\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      this.logErrorDetails(error);\r\n      \r\n      // Tentar alternativa com POST em vez de GET\r\n      try {\r\n        console.log(\"Tentando alternativa com método POST...\");\r\n        const user = AuthService.getCurrentUser();\r\n        const response = await axios.post(API_URL + \"perfil\", \r\n          { clienteId: user.id },\r\n          { \r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': 'Bearer ' + user.accessToken,\r\n              'x-access-token': user.accessToken\r\n            }\r\n          }\r\n        );\r\n        return response;\r\n      } catch (secondError) {\r\n        console.error(\"Segunda tentativa também falhou:\", secondError.message);\r\n        throw error; // Lançar o erro original\r\n      }\r\n    }\r\n  }\r\n  \r\n  logErrorDetails(error) {\r\n    console.error(\"Erro ao comunicar com a API:\", error.message);\r\n    if (error.response) {\r\n      console.log(\"Status:\", error.response.status);\r\n      console.log(\"Dados:\", error.response.data);\r\n      console.log(\"Headers:\", error.response.headers);\r\n      \r\n      // Imprimir cabeçalhos enviados\r\n      console.log(\"Cabeçalhos enviados:\", error.config.headers);\r\n    } else if (error.request) {\r\n      console.log(\"Request enviado, sem resposta:\", error.request);\r\n    }\r\n    console.log(\"Config completa:\", error.config);\r\n  }\r\n\r\n  // Atualizar perfil do cliente\r\n  async updateClienteProfile(clienteData) {\r\n    this.refreshAuth(); // Garante que o token está atualizado\r\n    console.log(\"Atualizando perfil, dados:\", clienteData);\r\n    return axios.put(`${API_URL}/perfil`, clienteData, {\r\n      headers: {\r\n        \"x-access-token\": AuthService.getCurrentUser().accessToken,\r\n        \"Authorization\": \"Bearer \" + AuthService.getCurrentUser().accessToken\r\n      }\r\n    });\r\n  }\r\n\r\n  // Obter histórico de consultas do cliente\r\n  async getConsultas() {\r\n    this.refreshAuth(); // Garante que o token está atualizado\r\n    return axios.get(`${API_URL}/consultas`, {\r\n      headers: {\r\n        \"x-access-token\": AuthService.getCurrentUser().accessToken,\r\n        \"Authorization\": \"Bearer \" + AuthService.getCurrentUser().accessToken\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default new ClienteService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}