{"ast":null,"code":"import axios from 'axios';\nimport authHeader from './auth-header';\nimport AuthService from './auth.service';\n\n// Detectar automaticamente o ambiente e configurar a URL base\nconst baseURL = process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' ? 'http://localhost:8000/api/' : '/api/');\n\n// Modificado para usar o endpoint correto\nconst API_URL = `${baseURL}`;\nclass ClienteService {\n  async getClienteProfile() {\n    try {\n      const user = AuthService.getCurrentUser();\n      if (!user) {\n        throw new Error('Usuário não autenticado');\n      }\n\n      // Confirmar estrutura do objeto de usuário e acessar ID corretamente\n      const userId = user.id || user.user && user.user.id;\n      if (!userId) {\n        console.error('Estrutura do objeto de usuário:', user);\n        throw new Error('ID do usuário não encontrado no objeto de usuário autenticado');\n      }\n\n      // Usar o endpoint correto para obter perfil completo do cliente\n      console.log('Buscando perfil completo do cliente em:', `${API_URL}cliente/perfil`);\n      const response = await axios.get(`${API_URL}cliente/perfil`, {\n        headers: authHeader()\n      });\n      console.log('Dados recebidos do perfil:', response.data);\n      return response;\n    } catch (error) {\n      console.error('Erro ao buscar perfil do cliente:', error);\n      throw error;\n    }\n  }\n  async updateClienteProfile(clienteData) {\n    try {\n      const user = AuthService.getCurrentUser();\n      if (!user) {\n        throw new Error('Usuário não autenticado');\n      }\n      console.log('Dados a atualizar no perfil:', clienteData);\n\n      // Usar o endpoint correto para atualizar o perfil do cliente\n      console.log('Tentando atualizar perfil em:', `${API_URL}cliente/perfil`);\n      return await axios.put(`${API_URL}cliente/perfil`, clienteData, {\n        headers: authHeader()\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar perfil do cliente:', error);\n      throw error;\n    }\n  }\n  async getAgendamentos() {\n    try {\n      return await axios.get(`${API_URL}cliente/agendamentos`, {\n        headers: authHeader()\n      });\n    } catch (error) {\n      console.error('Erro ao buscar agendamentos:', error);\n      throw error;\n    }\n  }\n  async updateHistorico(historicoData) {\n    try {\n      const user = AuthService.getCurrentUser();\n      if (!user) {\n        throw new Error('Usuário não autenticado');\n      }\n      const userId = user.id || user.user && user.user.id;\n      if (!userId) {\n        throw new Error('ID do usuário não encontrado');\n      }\n      return await axios.post(`${API_URL}cliente/${userId}/historico`, {\n        historico: JSON.stringify(historicoData)\n      }, {\n        headers: authHeader()\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar histórico:', error);\n      throw error;\n    }\n  }\n}\nexport default new ClienteService();","map":{"version":3,"names":["axios","authHeader","AuthService","baseURL","process","env","REACT_APP_API_URL","window","location","hostname","API_URL","ClienteService","getClienteProfile","user","getCurrentUser","Error","userId","id","console","error","log","response","get","headers","data","updateClienteProfile","clienteData","put","getAgendamentos","updateHistorico","historicoData","post","historico","JSON","stringify"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/cliente.service.js"],"sourcesContent":["import axios from 'axios';\r\nimport authHeader from './auth-header';\r\nimport AuthService from './auth.service';\r\n\r\n// Detectar automaticamente o ambiente e configurar a URL base\r\nconst baseURL = process.env.REACT_APP_API_URL || \r\n               (window.location.hostname === 'localhost' ? \r\n                'http://localhost:8000/api/' : \r\n                '/api/');\r\n\r\n// Modificado para usar o endpoint correto\r\nconst API_URL = `${baseURL}`;\r\n\r\nclass ClienteService {\r\n  async getClienteProfile() {\r\n    try {\r\n      const user = AuthService.getCurrentUser();\r\n      if (!user) {\r\n        throw new Error('Usuário não autenticado');\r\n      }\r\n      \r\n      // Confirmar estrutura do objeto de usuário e acessar ID corretamente\r\n      const userId = user.id || (user.user && user.user.id);\r\n      if (!userId) {\r\n        console.error('Estrutura do objeto de usuário:', user);\r\n        throw new Error('ID do usuário não encontrado no objeto de usuário autenticado');\r\n      }\r\n      \r\n      // Usar o endpoint correto para obter perfil completo do cliente\r\n      console.log('Buscando perfil completo do cliente em:', `${API_URL}cliente/perfil`);\r\n      const response = await axios.get(`${API_URL}cliente/perfil`, { headers: authHeader() });\r\n      \r\n      console.log('Dados recebidos do perfil:', response.data);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar perfil do cliente:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async updateClienteProfile(clienteData) {\r\n    try {\r\n      const user = AuthService.getCurrentUser();\r\n      if (!user) {\r\n        throw new Error('Usuário não autenticado');\r\n      }\r\n      \r\n      console.log('Dados a atualizar no perfil:', clienteData);\r\n      \r\n      // Usar o endpoint correto para atualizar o perfil do cliente\r\n      console.log('Tentando atualizar perfil em:', `${API_URL}cliente/perfil`);\r\n      return await axios.put(`${API_URL}cliente/perfil`, clienteData, { \r\n        headers: authHeader() \r\n      });\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar perfil do cliente:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async getAgendamentos() {\r\n    try {\r\n      return await axios.get(`${API_URL}cliente/agendamentos`, { headers: authHeader() });\r\n    } catch (error) {\r\n      console.error('Erro ao buscar agendamentos:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async updateHistorico(historicoData) {\r\n    try {\r\n      const user = AuthService.getCurrentUser();\r\n      if (!user) {\r\n        throw new Error('Usuário não autenticado');\r\n      }\r\n      \r\n      const userId = user.id || (user.user && user.user.id);\r\n      if (!userId) {\r\n        throw new Error('ID do usuário não encontrado');\r\n      }\r\n      \r\n      return await axios.post(`${API_URL}cliente/${userId}/historico`, \r\n        { historico: JSON.stringify(historicoData) }, \r\n        { headers: authHeader() }\r\n      );\r\n    } catch (error) {\r\n      console.error('Erro ao atualizar histórico:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new ClienteService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}