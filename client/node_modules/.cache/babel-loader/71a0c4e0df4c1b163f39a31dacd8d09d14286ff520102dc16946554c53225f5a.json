{"ast":null,"code":"import axios from 'axios';\nimport AuthService from './auth.service';\nconst API_URL = \"http://localhost:8000/api/cliente/\";\nclass ClienteService {\n  constructor() {\n    this.refreshAuth();\n  }\n  refreshAuth() {\n    const user = AuthService.getCurrentUser();\n    if (user && user.accessToken) {\n      // Configuração global para todas as requisições axios\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + user.accessToken;\n      axios.defaults.headers.common['x-access-token'] = user.accessToken;\n      console.log(\"ClienteService - Token disponível:\", user.accessToken ? \"Sim\" : \"Não\");\n      console.log(\"ClienteService - Token configurado nos headers do Axios\");\n    }\n  }\n\n  // Função de decodificação JWT simples sem dependências externas\n  decodeToken(token) {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error(\"Erro ao decodificar token:\", error);\n      return null;\n    }\n  }\n  isTokenExpired(token) {\n    try {\n      const decoded = this.decodeToken(token);\n      if (!decoded || !decoded.exp) return true;\n      const currentTime = Date.now() / 1000;\n      return decoded.exp < currentTime;\n    } catch (error) {\n      console.error(\"Erro ao verificar expiração do token:\", error);\n      return true;\n    }\n  }\n  async getClienteProfile() {\n    try {\n      console.log(\"Buscando perfil do cliente em: \" + API_URL + \"perfil\");\n      const user = AuthService.getCurrentUser();\n\n      // Verificar se temos o token disponível\n      if (!user || !user.accessToken) {\n        console.error(\"Token de autenticação não disponível\");\n        return {\n          error: true,\n          message: \"Token não disponível\"\n        };\n      }\n\n      // Verificar se o token está expirado\n      if (this.isTokenExpired(user.accessToken)) {\n        console.error(\"Token expirado. Por favor, faça login novamente.\");\n        return {\n          error: true,\n          message: \"Token expirado\"\n        };\n      }\n      console.log(\"Enviando token:\", user.accessToken.substring(0, 20) + \"...\");\n\n      // Criando uma instância do axios com os cabeçalhos adequados\n      const axiosInstance = axios.create({\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${user.accessToken}`\n        }\n      });\n\n      // Primeira tentativa: método GET padrão\n      try {\n        const response = await axiosInstance.get(API_URL + \"perfil\");\n        console.log(\"Resposta recebida:\", response.data);\n        return response;\n      } catch (error) {\n        console.log(\"Tentando com parâmetro de query...\");\n\n        // Tentativa alternativa: usando o token como parâmetro de query\n        try {\n          return await axiosInstance.get(`${API_URL}perfil?token=${user.accessToken}`);\n        } catch (tokenQueryError) {\n          console.log(\"Tentativa com token na query falhou, tentando POST...\");\n\n          // Última tentativa: enviar como POST com o token no corpo\n          try {\n            return await axiosInstance.post(API_URL + \"perfil\", {\n              token: user.accessToken,\n              userId: user.id\n            });\n          } catch (postError) {\n            console.error(\"Todas as tentativas falharam\");\n            throw error; // Lançamos o erro original\n          }\n        }\n      }\n    } catch (error) {\n      this.logErrorDetails(error);\n      throw error;\n    }\n  }\n  logErrorDetails(error) {\n    console.error(\"Erro ao comunicar com a API:\", error.message);\n    if (error.response) {\n      console.log(\"Status:\", error.response.status);\n      console.log(\"Dados:\", error.response.data);\n      console.log(\"Headers:\", error.response.headers);\n      console.log(\"Cabeçalhos enviados:\", error.config.headers);\n    } else if (error.request) {\n      console.log(\"Request enviado, sem resposta:\", error.request);\n    }\n    console.log(\"Config completa:\", error.config);\n  }\n\n  // Atualizar perfil do cliente\n  async updateClienteProfile(clienteData) {\n    this.refreshAuth(); // Garante que o token está atualizado\n    console.log(\"Atualizando perfil, dados:\", clienteData);\n    return axios.put(`${API_URL}/perfil`, clienteData, {\n      headers: {\n        \"x-access-token\": AuthService.getCurrentUser().accessToken,\n        \"Authorization\": \"Bearer \" + AuthService.getCurrentUser().accessToken\n      }\n    });\n  }\n\n  // Obter histórico de consultas do cliente\n  async getConsultas() {\n    this.refreshAuth(); // Garante que o token está atualizado\n    return axios.get(`${API_URL}/consultas`, {\n      headers: {\n        \"x-access-token\": AuthService.getCurrentUser().accessToken,\n        \"Authorization\": \"Bearer \" + AuthService.getCurrentUser().accessToken\n      }\n    });\n  }\n}\nexport default new ClienteService();","map":{"version":3,"names":["axios","AuthService","API_URL","ClienteService","constructor","refreshAuth","user","getCurrentUser","accessToken","defaults","headers","common","console","log","decodeToken","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","isTokenExpired","decoded","exp","currentTime","Date","now","getClienteProfile","message","substring","axiosInstance","create","response","get","data","tokenQueryError","post","userId","id","postError","logErrorDetails","status","config","request","updateClienteProfile","clienteData","put","getConsultas"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/cliente.service.js"],"sourcesContent":["import axios from 'axios';\r\nimport AuthService from './auth.service';\r\n\r\nconst API_URL = \"http://localhost:8000/api/cliente/\";\r\n\r\nclass ClienteService {\r\n  constructor() {\r\n    this.refreshAuth();\r\n  }\r\n  \r\n  refreshAuth() {\r\n    const user = AuthService.getCurrentUser();\r\n    if (user && user.accessToken) {\r\n      // Configuração global para todas as requisições axios\r\n      axios.defaults.headers.common['Authorization'] = 'Bearer ' + user.accessToken;\r\n      axios.defaults.headers.common['x-access-token'] = user.accessToken;\r\n      \r\n      console.log(\"ClienteService - Token disponível:\", user.accessToken ? \"Sim\" : \"Não\");\r\n      console.log(\"ClienteService - Token configurado nos headers do Axios\");\r\n    }\r\n  }\r\n\r\n  // Função de decodificação JWT simples sem dependências externas\r\n  decodeToken(token) {\r\n    try {\r\n      const base64Url = token.split('.')[1];\r\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n      const jsonPayload = decodeURIComponent(\r\n        atob(base64)\r\n          .split('')\r\n          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n          .join('')\r\n      );\r\n      return JSON.parse(jsonPayload);\r\n    } catch (error) {\r\n      console.error(\"Erro ao decodificar token:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = this.decodeToken(token);\r\n      if (!decoded || !decoded.exp) return true;\r\n      \r\n      const currentTime = Date.now() / 1000;\r\n      return decoded.exp < currentTime;\r\n    } catch (error) {\r\n      console.error(\"Erro ao verificar expiração do token:\", error);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  async getClienteProfile() {\r\n    try {\r\n      console.log(\"Buscando perfil do cliente em: \" + API_URL + \"perfil\");\r\n      const user = AuthService.getCurrentUser();\r\n      \r\n      // Verificar se temos o token disponível\r\n      if (!user || !user.accessToken) {\r\n        console.error(\"Token de autenticação não disponível\");\r\n        return { error: true, message: \"Token não disponível\" };\r\n      }\r\n\r\n      // Verificar se o token está expirado\r\n      if (this.isTokenExpired(user.accessToken)) {\r\n        console.error(\"Token expirado. Por favor, faça login novamente.\");\r\n        return { error: true, message: \"Token expirado\" };\r\n      }\r\n\r\n      console.log(\"Enviando token:\", user.accessToken.substring(0, 20) + \"...\");\r\n      \r\n      // Criando uma instância do axios com os cabeçalhos adequados\r\n      const axiosInstance = axios.create({\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${user.accessToken}`\r\n        }\r\n      });\r\n\r\n      // Primeira tentativa: método GET padrão\r\n      try {\r\n        const response = await axiosInstance.get(API_URL + \"perfil\");\r\n        console.log(\"Resposta recebida:\", response.data);\r\n        return response;\r\n      } catch (error) {\r\n        console.log(\"Tentando com parâmetro de query...\");\r\n        \r\n        // Tentativa alternativa: usando o token como parâmetro de query\r\n        try {\r\n          return await axiosInstance.get(`${API_URL}perfil?token=${user.accessToken}`);\r\n        } catch (tokenQueryError) {\r\n          console.log(\"Tentativa com token na query falhou, tentando POST...\");\r\n          \r\n          // Última tentativa: enviar como POST com o token no corpo\r\n          try {\r\n            return await axiosInstance.post(API_URL + \"perfil\", { \r\n              token: user.accessToken,\r\n              userId: user.id\r\n            });\r\n          } catch (postError) {\r\n            console.error(\"Todas as tentativas falharam\");\r\n            throw error; // Lançamos o erro original\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logErrorDetails(error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  logErrorDetails(error) {\r\n    console.error(\"Erro ao comunicar com a API:\", error.message);\r\n    if (error.response) {\r\n      console.log(\"Status:\", error.response.status);\r\n      console.log(\"Dados:\", error.response.data);\r\n      console.log(\"Headers:\", error.response.headers);\r\n      console.log(\"Cabeçalhos enviados:\", error.config.headers);\r\n    } else if (error.request) {\r\n      console.log(\"Request enviado, sem resposta:\", error.request);\r\n    }\r\n    console.log(\"Config completa:\", error.config);\r\n  }\r\n\r\n  // Atualizar perfil do cliente\r\n  async updateClienteProfile(clienteData) {\r\n    this.refreshAuth(); // Garante que o token está atualizado\r\n    console.log(\"Atualizando perfil, dados:\", clienteData);\r\n    return axios.put(`${API_URL}/perfil`, clienteData, {\r\n      headers: {\r\n        \"x-access-token\": AuthService.getCurrentUser().accessToken,\r\n        \"Authorization\": \"Bearer \" + AuthService.getCurrentUser().accessToken\r\n      }\r\n    });\r\n  }\r\n\r\n  // Obter histórico de consultas do cliente\r\n  async getConsultas() {\r\n    this.refreshAuth(); // Garante que o token está atualizado\r\n    return axios.get(`${API_URL}/consultas`, {\r\n      headers: {\r\n        \"x-access-token\": AuthService.getCurrentUser().accessToken,\r\n        \"Authorization\": \"Bearer \" + AuthService.getCurrentUser().accessToken\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default new ClienteService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}