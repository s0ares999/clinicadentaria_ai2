{"ast":null,"code":"import axios from 'axios';\n\n// Detectar automaticamente o ambiente e configurar a URL base\nconst baseURL = process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' ? 'http://localhost:8000/api/' : '/api/');\nconst API_URL = `${baseURL}auth/`;\nclass AuthService {\n  login(email, password) {\n    console.log('Login attempt:', {\n      email\n    });\n    return axios.post(API_URL + \"/signin\", {\n      email,\n      password\n    }).then(response => {\n      console.log('Login response:', response.data);\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n  async register(email, senha, nome, telefone, role, dadosEspecificos = {}) {\n    try {\n      console.log(`Tentando registro em ${API_URL}signup`);\n      console.log(\"Dados a enviar:\", {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      });\n\n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n\n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos // Inclui todos os dados específicos (data_nascimento, morada, nif, etc.)\n      };\n      console.log(\"Dados completos a enviar:\", userData);\n      return await axios.post(API_URL + 'signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n\n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      throw error;\n    }\n  }\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem(\"user\");\n      if (!userStr) return null;\n      const user = JSON.parse(userStr);\n      console.log('Auth.service - Retrieved user from localStorage:', user);\n\n      // Se o token está disponível, extrair as informações dele para garantir\n      if (user && user.accessToken) {\n        try {\n          const tokenPayload = JSON.parse(atob(user.accessToken.split('.')[1]));\n          console.log('Token payload:', tokenPayload);\n\n          // Atualizar o objeto user com as informações do token\n          if (tokenPayload) {\n            user.role = tokenPayload.role || user.role;\n            user.tipo = tokenPayload.tipo || user.tipo;\n          }\n        } catch (e) {\n          console.error('Erro ao decodificar token:', e);\n        }\n      }\n      return user;\n    } catch (error) {\n      console.error('Erro ao recuperar usuário:', error);\n      return null;\n    }\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","baseURL","process","env","REACT_APP_API_URL","window","location","hostname","API_URL","AuthService","login","email","password","console","log","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","logout","removeItem","register","senha","nome","telefone","role","dadosEspecificos","tipo","config","timeout","userData","error","code","message","url","serverStatus","getCurrentUser","userStr","getItem","user","parse","tokenPayload","atob","split","e","isAuthenticated","isAdmin","roles","includes","hasRole","requiredRole","tipoUtilizador"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\n\n// Detectar automaticamente o ambiente e configurar a URL base\nconst baseURL = process.env.REACT_APP_API_URL || \n               (window.location.hostname === 'localhost' ? \n                'http://localhost:8000/api/' : \n                '/api/');\n\nconst API_URL = `${baseURL}auth/`;\n\nclass AuthService {\n  login(email, password) {\n    console.log('Login attempt:', { email });\n    return axios\n      .post(API_URL + \"/signin\", {\n        email,\n        password\n      })\n      .then(response => {\n        console.log('Login response:', response.data);\n        if (response.data.accessToken) {\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\n        }\n        return response.data;\n      });\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  async register(email, senha, nome, telefone, role, dadosEspecificos = {}) {\n    try {\n      console.log(`Tentando registro em ${API_URL}signup`);\n      console.log(\"Dados a enviar:\", {\n        nome, email, senha, telefone, tipo: role, ...dadosEspecificos\n      });\n      \n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n      \n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos // Inclui todos os dados específicos (data_nascimento, morada, nif, etc.)\n      };\n      \n      console.log(\"Dados completos a enviar:\", userData);\n      \n      return await axios.post(API_URL + 'signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n      \n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      \n      throw error;\n    }\n  }\n\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem(\"user\");\n      if (!userStr) return null;\n      \n      const user = JSON.parse(userStr);\n      console.log('Auth.service - Retrieved user from localStorage:', user);\n      \n      // Se o token está disponível, extrair as informações dele para garantir\n      if (user && user.accessToken) {\n        try {\n          const tokenPayload = JSON.parse(atob(user.accessToken.split('.')[1]));\n          console.log('Token payload:', tokenPayload);\n          \n          // Atualizar o objeto user com as informações do token\n          if (tokenPayload) {\n            user.role = tokenPayload.role || user.role;\n            user.tipo = tokenPayload.tipo || user.tipo;\n          }\n        } catch (e) {\n          console.error('Erro ao decodificar token:', e);\n        }\n      }\n      \n      return user;\n    } catch (error) {\n      console.error('Erro ao recuperar usuário:', error);\n      return null;\n    }\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}