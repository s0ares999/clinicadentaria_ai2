{"ast":null,"code":"import axios from 'axios';\nimport AuthService from './auth.service';\nconst API_URL = process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' ? 'http://localhost:8000/api/' : '/api/');\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para adicionar token em todas as requisições\napi.interceptors.request.use(config => {\n  const user = AuthService.getCurrentUser();\n  if (user !== null && user !== void 0 && user.accessToken) {\n    config.headers['Authorization'] = `Bearer ${user.accessToken}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Interceptor para tratamento de erros e refresh token\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshed = await AuthService.refreshToken();\n      if (refreshed) {\n        originalRequest.headers['Authorization'] = `Bearer ${refreshed.accessToken}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      AuthService.logout();\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","AuthService","API_URL","process","env","REACT_APP_API_URL","window","location","hostname","api","create","baseURL","headers","interceptors","request","use","config","user","getCurrentUser","accessToken","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshed","refreshToken","refreshError","logout","href"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/api.config.js"],"sourcesContent":["import axios from 'axios';\r\nimport AuthService from './auth.service';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || \r\n  (window.location.hostname === 'localhost' ? 'http://localhost:8000/api/' : '/api/');\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Interceptor para adicionar token em todas as requisições\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const user = AuthService.getCurrentUser();\r\n    if (user?.accessToken) {\r\n      config.headers['Authorization'] = `Bearer ${user.accessToken}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Interceptor para tratamento de erros e refresh token\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        const refreshed = await AuthService.refreshToken();\r\n        if (refreshed) {\r\n          originalRequest.headers['Authorization'] = `Bearer ${refreshed.accessToken}`;\r\n          return api(originalRequest);\r\n        }\r\n      } catch (refreshError) {\r\n        AuthService.logout();\r\n        window.location.href = '/login';\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,gBAAgB;AAExC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,KAC1CC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,GAAG,4BAA4B,GAAG,OAAO,CAAC;AAErF,MAAMC,GAAG,GAAGT,KAAK,CAACU,MAAM,CAAC;EACvBC,OAAO,EAAET,OAAO;EAChBU,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,IAAI,GAAGhB,WAAW,CAACiB,cAAc,CAAC,CAAC;EACzC,IAAID,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEE,WAAW,EAAE;IACrBH,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,IAAI,CAACE,WAAW,EAAE;EAChE;EACA,OAAOH,MAAM;AACf,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,MAAMC,eAAe,GAAGL,KAAK,CAACJ,MAAM;EAEpC,IAAI,EAAAQ,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF,MAAMC,SAAS,GAAG,MAAM3B,WAAW,CAAC4B,YAAY,CAAC,CAAC;MAClD,IAAID,SAAS,EAAE;QACbH,eAAe,CAACb,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUgB,SAAS,CAACT,WAAW,EAAE;QAC5E,OAAOV,GAAG,CAACgB,eAAe,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOK,YAAY,EAAE;MACrB7B,WAAW,CAAC8B,MAAM,CAAC,CAAC;MACpBzB,MAAM,CAACC,QAAQ,CAACyB,IAAI,GAAG,QAAQ;MAC/B,OAAOX,OAAO,CAACC,MAAM,CAACQ,YAAY,CAAC;IACrC;EACF;EACA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}