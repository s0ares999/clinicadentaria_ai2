{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/auth/';\nclass AuthService {\n  async login(email, password) {\n    try {\n      const response = await axios.post(API_URL + 'signin', {\n        email,\n        password\n      });\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  async register(email, senha, nome, telefone, role, dadosEspecificos) {\n    try {\n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      };\n      return await axios.post(API_URL + 'signup', userData);\n    } catch (error) {\n      throw error;\n    }\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","AuthService","login","email","password","response","post","data","accessToken","localStorage","setItem","JSON","stringify","error","logout","removeItem","register","senha","nome","telefone","role","dadosEspecificos","userData","tipo","getCurrentUser","parse","getItem","isAuthenticated","user","isAdmin","roles","includes","hasRole","requiredRole","tipoUtilizador"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api/auth/';\n\nclass AuthService {\n  async login(email, password) {\n    try {\n      const response = await axios.post(API_URL + 'signin', {\n        email,\n        password\n      });\n      \n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  async register(email, senha, nome, telefone, role, dadosEspecificos) {\n    try {\n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      };\n      \n      return await axios.post(API_URL + 'signup', userData);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,iCAAiC;AAEjD,MAAMC,WAAW,CAAC;EAChB,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAACN,OAAO,GAAG,QAAQ,EAAE;QACpDG,KAAK;QACLC;MACF,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACE,IAAI,CAACC,WAAW,EAAE;QAC7BC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAAC,CAAC;MAC7D;MAEA,OAAOF,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;EAEAC,MAAMA,CAAA,EAAG;IACPL,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;EACjC;EAEA,MAAMC,QAAQA,CAACb,KAAK,EAAEc,KAAK,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,gBAAgB,EAAE;IACnE,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG;QACfJ,IAAI;QACJf,KAAK;QACLc,KAAK;QACLE,QAAQ;QACRI,IAAI,EAAEH,IAAI;QACV,GAAGC;MACL,CAAC;MAED,OAAO,MAAMtB,KAAK,CAACO,IAAI,CAACN,OAAO,GAAG,QAAQ,EAAEsB,QAAQ,CAAC;IACvD,CAAC,CAAC,OAAOT,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;EAEAW,cAAcA,CAAA,EAAG;IACf,OAAOb,IAAI,CAACc,KAAK,CAAChB,YAAY,CAACiB,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;;EAEA;EACAC,eAAeA,CAAA,EAAG;IAChB,MAAMC,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,OAAO,CAAC,CAACI,IAAI,IAAI,CAAC,CAACA,IAAI,CAACpB,WAAW;EACrC;;EAEA;EACAqB,OAAOA,CAAA,EAAG;IACR,MAAMD,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,OAAO,CAAC,CAACI,IAAI,IAAIA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACC,QAAQ,CAAC,YAAY,CAAC;EAClE;EAEAC,OAAOA,CAACC,YAAY,EAAE;IACpB,MAAML,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,IAAI,CAACI,IAAI,IAAI,CAACA,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACA,IAAI,CAACM,cAAc,EAAE,OAAO,KAAK;IAClE,OAAON,IAAI,CAACA,IAAI,CAACM,cAAc,CAAChB,IAAI,KAAKe,YAAY;EACvD;AACF;AAEA,eAAe,IAAIhC,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}