{"ast":null,"code":"import api from './api.config';\nclass AuthService {\n  async login(email, password) {\n    try {\n      const response = await api.post('auth/signin', {\n        email,\n        password\n      });\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Erro no login:', error);\n      throw error;\n    }\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  async register(email, senha, nome, telefone, role, dadosEspecificos = {}) {\n    try {\n      console.log(`Tentando registro em ${API_URL}signup`);\n      console.log(\"Dados a enviar:\", {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos\n      });\n\n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n\n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos // Inclui todos os dados específicos (data_nascimento, morada, nif, etc.)\n      };\n      console.log(\"Dados completos a enviar:\", userData);\n      return await api.post('auth/signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n\n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      throw error;\n    }\n  }\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem('user');\n      if (!userStr) return null;\n      const user = JSON.parse(userStr);\n      if (user !== null && user !== void 0 && user.accessToken) {\n        const tokenPayload = this.decodeToken(user.accessToken);\n        return {\n          ...user,\n          tipo: (tokenPayload === null || tokenPayload === void 0 ? void 0 : tokenPayload.tipo) || user.tipo,\n          role: (tokenPayload === null || tokenPayload === void 0 ? void 0 : tokenPayload.role) || user.role\n        };\n      }\n      return user;\n    } catch (error) {\n      console.error('Erro ao recuperar usuário:', error);\n      return null;\n    }\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n  getToken() {\n    const user = this.getCurrentUser();\n    return user === null || user === void 0 ? void 0 : user.accessToken;\n  }\n  async refreshToken() {\n    const user = this.getCurrentUser();\n    if (!(user !== null && user !== void 0 && user.refreshToken)) return null;\n    try {\n      const response = await api.post('auth/refresh-token', {\n        refreshToken: user.refreshToken\n      });\n      if (response.data.accessToken) {\n        const updatedUser = {\n          ...user,\n          accessToken: response.data.accessToken\n        };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        return updatedUser;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      return null;\n    }\n  }\n  decodeToken(token) {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('Erro ao decodificar token:', error);\n      return null;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["api","AuthService","login","email","password","response","post","data","accessToken","localStorage","setItem","JSON","stringify","error","console","logout","removeItem","register","senha","nome","telefone","role","dadosEspecificos","log","API_URL","tipo","config","timeout","userData","code","message","url","serverStatus","getCurrentUser","userStr","getItem","user","parse","tokenPayload","decodeToken","isAuthenticated","isAdmin","roles","includes","hasRole","requiredRole","tipoUtilizador","getToken","refreshToken","updatedUser","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/auth.service.js"],"sourcesContent":["import api from './api.config';\n\nclass AuthService {\n  async login(email, password) {\n    try {\n      const response = await api.post('auth/signin', { email, password });\n      if (response.data.accessToken) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Erro no login:', error);\n      throw error;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  async register(email, senha, nome, telefone, role, dadosEspecificos = {}) {\n    try {\n      console.log(`Tentando registro em ${API_URL}signup`);\n      console.log(\"Dados a enviar:\", {\n        nome, email, senha, telefone, tipo: role, ...dadosEspecificos\n      });\n      \n      // Adicionar timeout maior para depuração\n      const config = {\n        timeout: 10000 // 10 segundos\n      };\n      \n      // Preparar os dados de acordo com o modelo do backend\n      const userData = {\n        nome,\n        email,\n        senha,\n        telefone,\n        tipo: role,\n        ...dadosEspecificos // Inclui todos os dados específicos (data_nascimento, morada, nif, etc.)\n      };\n      \n      console.log(\"Dados completos a enviar:\", userData);\n      \n      return await api.post('auth/signup', userData, config);\n    } catch (error) {\n      console.error(\"Service: erro no registro\", error);\n      \n      // Mais informações de diagnóstico\n      if (error.code === 'ERR_NETWORK') {\n        console.error(\"Detalhes do erro de rede:\", {\n          message: error.message,\n          url: API_URL + 'signup',\n          serverStatus: \"Não respondendo ou inacessível\"\n        });\n      }\n      \n      throw error;\n    }\n  }\n\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem('user');\n      if (!userStr) return null;\n      \n      const user = JSON.parse(userStr);\n      if (user?.accessToken) {\n        const tokenPayload = this.decodeToken(user.accessToken);\n        return {\n          ...user,\n          tipo: tokenPayload?.tipo || user.tipo,\n          role: tokenPayload?.role || user.role\n        };\n      }\n      return user;\n    } catch (error) {\n      console.error('Erro ao recuperar usuário:', error);\n      return null;\n    }\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    if (!user || !user.user || !user.user.tipoUtilizador) return false;\n    return user.user.tipoUtilizador.nome === requiredRole;\n  }\n\n  getToken() {\n    const user = this.getCurrentUser();\n    return user?.accessToken;\n  }\n\n  async refreshToken() {\n    const user = this.getCurrentUser();\n    if (!user?.refreshToken) return null;\n\n    try {\n      const response = await api.post('auth/refresh-token', {\n        refreshToken: user.refreshToken\n      });\n\n      if (response.data.accessToken) {\n        const updatedUser = {\n          ...user,\n          accessToken: response.data.accessToken\n        };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        return updatedUser;\n      }\n      return null;\n    } catch (error) {\n      console.error('Erro ao renovar token:', error);\n      return null;\n    }\n  }\n\n  decodeToken(token) {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split('')\n          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('Erro ao decodificar token:', error);\n      return null;\n    }\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}