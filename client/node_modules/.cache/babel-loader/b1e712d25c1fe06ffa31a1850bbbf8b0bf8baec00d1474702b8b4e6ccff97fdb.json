{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/auth/';\nclass AuthService {\n  async login(username, password) {\n    const response = await axios.post(API_URL + 'signin', {\n      username,\n      password\n    });\n    if (response.data.accessToken) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  }\n  logout() {\n    localStorage.removeItem('user');\n  }\n  async register(username, email, password, role, userData) {\n    return axios.post(API_URL + 'signup', {\n      username,\n      email,\n      password,\n      role,\n      ...userData\n    });\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    return user && user.roles && user.roles.includes(requiredRole);\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","AuthService","login","username","password","response","post","data","accessToken","localStorage","setItem","JSON","stringify","logout","removeItem","register","email","role","userData","getCurrentUser","parse","getItem","isAuthenticated","user","isAdmin","roles","includes","hasRole","requiredRole"],"sources":["C:/Users/s0ares/clinicadentaria_ai2/client/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api/auth/';\n\nclass AuthService {\n  async login(username, password) {\n    const response = await axios.post(API_URL + 'signin', {\n      username,\n      password\n    });\n    \n    if (response.data.accessToken) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    \n    return response.data;\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  async register(username, email, password, role, userData) {\n    return axios.post(API_URL + 'signup', {\n      username,\n      email,\n      password,\n      role,\n      ...userData\n    });\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Verificar se o token ainda é válido (isso poderia ser expandido para incluir verificação de expiração)\n  isAuthenticated() {\n    const user = this.getCurrentUser();\n    return !!user && !!user.accessToken;\n  }\n\n  // Verificar se o usuário é admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return !!user && user.roles && user.roles.includes('ROLE_ADMIN');\n  }\n\n  hasRole(requiredRole) {\n    const user = this.getCurrentUser();\n    return user && user.roles && user.roles.includes(requiredRole);\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,iCAAiC;AAEjD,MAAMC,WAAW,CAAC;EAChB,MAAMC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAC9B,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAACN,OAAO,GAAG,QAAQ,EAAE;MACpDG,QAAQ;MACRC;IACF,CAAC,CAAC;IAEF,IAAIC,QAAQ,CAACE,IAAI,CAACC,WAAW,EAAE;MAC7BC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC7D;IAEA,OAAOF,QAAQ,CAACE,IAAI;EACtB;EAEAM,MAAMA,CAAA,EAAG;IACPJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;EACjC;EAEA,MAAMC,QAAQA,CAACZ,QAAQ,EAAEa,KAAK,EAAEZ,QAAQ,EAAEa,IAAI,EAAEC,QAAQ,EAAE;IACxD,OAAOnB,KAAK,CAACO,IAAI,CAACN,OAAO,GAAG,QAAQ,EAAE;MACpCG,QAAQ;MACRa,KAAK;MACLZ,QAAQ;MACRa,IAAI;MACJ,GAAGC;IACL,CAAC,CAAC;EACJ;EAEAC,cAAcA,CAAA,EAAG;IACf,OAAOR,IAAI,CAACS,KAAK,CAACX,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;;EAEA;EACAC,eAAeA,CAAA,EAAG;IAChB,MAAMC,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,OAAO,CAAC,CAACI,IAAI,IAAI,CAAC,CAACA,IAAI,CAACf,WAAW;EACrC;;EAEA;EACAgB,OAAOA,CAAA,EAAG;IACR,MAAMD,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,OAAO,CAAC,CAACI,IAAI,IAAIA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACC,QAAQ,CAAC,YAAY,CAAC;EAClE;EAEAC,OAAOA,CAACC,YAAY,EAAE;IACpB,MAAML,IAAI,GAAG,IAAI,CAACJ,cAAc,CAAC,CAAC;IAClC,OAAOI,IAAI,IAAIA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACC,QAAQ,CAACE,YAAY,CAAC;EAChE;AACF;AAEA,eAAe,IAAI3B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}